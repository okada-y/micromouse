ARM GAS  C:\Temp\ccECMYrR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"exvol.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_mode_ctrl,"ax",%progbits
  18              		.align	1
  19              		.global	set_mode_ctrl
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_mode_ctrl:
  27              	.LVL0:
  28              	.LFB134:
  29              		.file 1 "Src/exvol.c"
   1:Src/exvol.c   **** //軌道制御、軌道補正から得た印加電圧から、
   2:Src/exvol.c   **** //モータに出力する印加電圧を決定する。
   3:Src/exvol.c   **** 
   4:Src/exvol.c   **** #include <stdio.h>
   5:Src/exvol.c   **** #include "main.h"
   6:Src/exvol.c   **** #include "exvol.h"
   7:Src/exvol.c   **** #include "motor.h"
   8:Src/exvol.c   **** #include "control.h"
   9:Src/exvol.c   **** #include "adjust.h"
  10:Src/exvol.c   **** #include "battery.h"
  11:Src/exvol.c   **** 
  12:Src/exvol.c   **** 
  13:Src/exvol.c   **** static ctrl_mode_num ctrl_mode = trace;
  14:Src/exvol.c   **** static float target_vol_sum = 0;
  15:Src/exvol.c   **** static float target_vol_diff = 0;
  16:Src/exvol.c   **** static float target_vol_r = 0;
  17:Src/exvol.c   **** static float target_vol_l = 0;
  18:Src/exvol.c   **** static int16_t target_duty_r = 0;
  19:Src/exvol.c   **** static int16_t target_duty_l = 0;
  20:Src/exvol.c   **** 
  21:Src/exvol.c   **** //機能	: モータの1msタスクまとめ
  22:Src/exvol.c   **** //引数	: なし
  23:Src/exvol.c   **** //返り値	: なし
  24:Src/exvol.c   **** //備考	: 1msタスク
  25:Src/exvol.c   **** void motor_1ms ( void )
  26:Src/exvol.c   **** {
  27:Src/exvol.c   **** 	set_motor_vol();		//印加電圧の和、差を制御モードに従い決定
  28:Src/exvol.c   **** 	clr_operate_history();	//各制御の操作履歴クリア
  29:Src/exvol.c   **** 	calc_motor_vol();		//印加電圧の和、差から各モータの印加電圧を決定する。
ARM GAS  C:\Temp\ccECMYrR.s 			page 2


  30:Src/exvol.c   **** 	calc_vol2duty();		//印加電圧を変調率に変換
  31:Src/exvol.c   **** 	motor_duty_adjust();	//低変調率を避ける調整
  32:Src/exvol.c   **** 	set_motor_duty();		//モータに電圧を印加
  33:Src/exvol.c   **** }
  34:Src/exvol.c   **** 
  35:Src/exvol.c   **** 
  36:Src/exvol.c   **** //機能 	:制御モードを設定
  37:Src/exvol.c   **** //引数 	:なし
  38:Src/exvol.c   **** //返り値:なし
  39:Src/exvol.c   **** void set_mode_ctrl(ctrl_mode_num mode_num)
  40:Src/exvol.c   **** {
  30              		.loc 1 40 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  41:Src/exvol.c   **** 	ctrl_mode = mode_num;
  35              		.loc 1 41 2 view .LVU1
  36              		.loc 1 41 12 is_stmt 0 view .LVU2
  37 0000 014B     		ldr	r3, .L2
  38 0002 1870     		strb	r0, [r3]
  42:Src/exvol.c   **** }
  39              		.loc 1 42 1 view .LVU3
  40 0004 7047     		bx	lr
  41              	.L3:
  42 0006 00BF     		.align	2
  43              	.L2:
  44 0008 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE134:
  48              		.section	.text.set_motor_vol_trace,"ax",%progbits
  49              		.align	1
  50              		.global	set_motor_vol_trace
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	set_motor_vol_trace:
  57              	.LFB136:
  43:Src/exvol.c   **** 
  44:Src/exvol.c   **** //機能 	:制御モード番号に従い、電圧を印可
  45:Src/exvol.c   **** //引数 	:なし
  46:Src/exvol.c   **** //返り値:なし
  47:Src/exvol.c   **** void set_motor_vol(void)
  48:Src/exvol.c   **** {
  49:Src/exvol.c   **** 	switch (ctrl_mode)
  50:Src/exvol.c   **** 	{
  51:Src/exvol.c   **** 	case trace:
  52:Src/exvol.c   **** 		set_motor_vol_trace();
  53:Src/exvol.c   **** 		break;
  54:Src/exvol.c   **** 	
  55:Src/exvol.c   **** 	case front_wall:
  56:Src/exvol.c   **** 		set_motor_vol_front_wall();
  57:Src/exvol.c   **** 		break;
  58:Src/exvol.c   **** 	
  59:Src/exvol.c   **** 	case side_wall:
  60:Src/exvol.c   **** 		set_motor_vol_side_wall();
ARM GAS  C:\Temp\ccECMYrR.s 			page 3


  61:Src/exvol.c   **** 		break;
  62:Src/exvol.c   **** 	
  63:Src/exvol.c   **** 	default:
  64:Src/exvol.c   **** 		clr_motor_vol();
  65:Src/exvol.c   **** 
  66:Src/exvol.c   **** 	}
  67:Src/exvol.c   **** }
  68:Src/exvol.c   **** 
  69:Src/exvol.c   **** //機能 	:軌跡制御時の印可電圧出力
  70:Src/exvol.c   **** //引数 	:なし
  71:Src/exvol.c   **** //返り値:なし
  72:Src/exvol.c   **** void set_motor_vol_trace(void)
  73:Src/exvol.c   **** {
  58              		.loc 1 73 1 is_stmt 1 view -0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62 0000 08B5     		push	{r3, lr}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 3, -8
  66              		.cfi_offset 14, -4
  74:Src/exvol.c   **** 	target_vol_sum = get_target_vol_sum_ctrl();
  67              		.loc 1 74 2 view .LVU5
  68              		.loc 1 74 19 is_stmt 0 view .LVU6
  69 0002 FFF7FEFF 		bl	get_target_vol_sum_ctrl
  70              	.LVL1:
  71              		.loc 1 74 17 view .LVU7
  72 0006 044B     		ldr	r3, .L6
  73 0008 83ED000A 		vstr.32	s0, [r3]
  75:Src/exvol.c   **** 	target_vol_diff = get_target_vol_diff_ctrl();
  74              		.loc 1 75 2 is_stmt 1 view .LVU8
  75              		.loc 1 75 20 is_stmt 0 view .LVU9
  76 000c FFF7FEFF 		bl	get_target_vol_diff_ctrl
  77              	.LVL2:
  78              		.loc 1 75 18 view .LVU10
  79 0010 024B     		ldr	r3, .L6+4
  80 0012 83ED000A 		vstr.32	s0, [r3]
  76:Src/exvol.c   **** }
  81              		.loc 1 76 1 view .LVU11
  82 0016 08BD     		pop	{r3, pc}
  83              	.L7:
  84              		.align	2
  85              	.L6:
  86 0018 00000000 		.word	.LANCHOR1
  87 001c 00000000 		.word	.LANCHOR2
  88              		.cfi_endproc
  89              	.LFE136:
  91              		.section	.text.set_motor_vol_front_wall,"ax",%progbits
  92              		.align	1
  93              		.global	set_motor_vol_front_wall
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	set_motor_vol_front_wall:
 100              	.LFB137:
ARM GAS  C:\Temp\ccECMYrR.s 			page 4


  77:Src/exvol.c   **** 
  78:Src/exvol.c   **** //機能 	:前壁制御時の印可電圧出力
  79:Src/exvol.c   **** //引数 	:なし
  80:Src/exvol.c   **** //返り値:なし
  81:Src/exvol.c   **** void set_motor_vol_front_wall(void)
  82:Src/exvol.c   **** {
 101              		.loc 1 82 1 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0000 08B5     		push	{r3, lr}
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
  83:Src/exvol.c   **** 	target_vol_sum = get_target_vol_sum_frontwall();
 110              		.loc 1 83 2 view .LVU13
 111              		.loc 1 83 19 is_stmt 0 view .LVU14
 112 0002 FFF7FEFF 		bl	get_target_vol_sum_frontwall
 113              	.LVL3:
 114              		.loc 1 83 17 view .LVU15
 115 0006 044B     		ldr	r3, .L10
 116 0008 83ED000A 		vstr.32	s0, [r3]
  84:Src/exvol.c   **** 	target_vol_diff = get_target_vol_diff_frontwall();
 117              		.loc 1 84 2 is_stmt 1 view .LVU16
 118              		.loc 1 84 20 is_stmt 0 view .LVU17
 119 000c FFF7FEFF 		bl	get_target_vol_diff_frontwall
 120              	.LVL4:
 121              		.loc 1 84 18 view .LVU18
 122 0010 024B     		ldr	r3, .L10+4
 123 0012 83ED000A 		vstr.32	s0, [r3]
  85:Src/exvol.c   **** }
 124              		.loc 1 85 1 view .LVU19
 125 0016 08BD     		pop	{r3, pc}
 126              	.L11:
 127              		.align	2
 128              	.L10:
 129 0018 00000000 		.word	.LANCHOR1
 130 001c 00000000 		.word	.LANCHOR2
 131              		.cfi_endproc
 132              	.LFE137:
 134              		.section	.text.set_motor_vol_side_wall,"ax",%progbits
 135              		.align	1
 136              		.global	set_motor_vol_side_wall
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu fpv4-sp-d16
 142              	set_motor_vol_side_wall:
 143              	.LFB138:
  86:Src/exvol.c   **** 
  87:Src/exvol.c   **** //機能 	:横壁制御時の印可電圧出力(差のみ)
  88:Src/exvol.c   **** //引数 	:なし
  89:Src/exvol.c   **** //返り値:なし
  90:Src/exvol.c   **** void set_motor_vol_side_wall(void)
  91:Src/exvol.c   **** {
 144              		.loc 1 91 1 is_stmt 1 view -0
ARM GAS  C:\Temp\ccECMYrR.s 			page 5


 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 0000 08B5     		push	{r3, lr}
 149              	.LCFI2:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 3, -8
 152              		.cfi_offset 14, -4
  92:Src/exvol.c   **** 	switch(get_side_wall_ctrl_mode()){
 153              		.loc 1 92 2 view .LVU21
 154              		.loc 1 92 9 is_stmt 0 view .LVU22
 155 0002 FFF7FEFF 		bl	get_side_wall_ctrl_mode
 156              	.LVL5:
 157 0006 0328     		cmp	r0, #3
 158 0008 0DD8     		bhi	.L12
 159 000a DFE800F0 		tbb	[pc, r0]
 160              	.L15:
 161 000e 02       		.byte	(.L18-.L15)/2
 162 000f 0D       		.byte	(.L17-.L15)/2
 163 0010 18       		.byte	(.L16-.L15)/2
 164 0011 23       		.byte	(.L14-.L15)/2
 165              		.p2align 1
 166              	.L18:
  93:Src/exvol.c   **** 		case right:
  94:Src/exvol.c   **** 			target_vol_sum = get_target_vol_sum_ctrl();	
 167              		.loc 1 94 4 is_stmt 1 view .LVU23
 168              		.loc 1 94 21 is_stmt 0 view .LVU24
 169 0012 FFF7FEFF 		bl	get_target_vol_sum_ctrl
 170              	.LVL6:
 171              		.loc 1 94 19 view .LVU25
 172 0016 154B     		ldr	r3, .L20
 173 0018 83ED000A 		vstr.32	s0, [r3]
  95:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 174              		.loc 1 95 4 is_stmt 1 view .LVU26
 175              		.loc 1 95 22 is_stmt 0 view .LVU27
 176 001c FFF7FEFF 		bl	get_target_vol_diff_sidewall
 177              	.LVL7:
 178              		.loc 1 95 20 view .LVU28
 179 0020 134B     		ldr	r3, .L20+4
 180 0022 83ED000A 		vstr.32	s0, [r3]
  96:Src/exvol.c   **** 			break;
 181              		.loc 1 96 4 is_stmt 1 view .LVU29
 182              	.L12:
  97:Src/exvol.c   **** 		
  98:Src/exvol.c   **** 		case left:
  99:Src/exvol.c   **** 			target_vol_sum = get_target_vol_sum_ctrl();	
 100:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 101:Src/exvol.c   **** 			break;
 102:Src/exvol.c   **** 
 103:Src/exvol.c   **** 		case both_side:
 104:Src/exvol.c   **** 			target_vol_sum = get_target_vol_sum_ctrl();
 105:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 106:Src/exvol.c   **** 			break;
 107:Src/exvol.c   **** 
 108:Src/exvol.c   **** 		case none: //両壁がないときは軌跡制御に
 109:Src/exvol.c   **** 			target_vol_sum = get_target_vol_sum_ctrl();
 110:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_ctrl();
ARM GAS  C:\Temp\ccECMYrR.s 			page 6


 111:Src/exvol.c   **** 			break;
 112:Src/exvol.c   **** 	}
 113:Src/exvol.c   **** }
 183              		.loc 1 113 1 is_stmt 0 view .LVU30
 184 0026 08BD     		pop	{r3, pc}
 185              	.L17:
  99:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 186              		.loc 1 99 4 is_stmt 1 view .LVU31
  99:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 187              		.loc 1 99 21 is_stmt 0 view .LVU32
 188 0028 FFF7FEFF 		bl	get_target_vol_sum_ctrl
 189              	.LVL8:
  99:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 190              		.loc 1 99 19 view .LVU33
 191 002c 0F4B     		ldr	r3, .L20
 192 002e 83ED000A 		vstr.32	s0, [r3]
 100:Src/exvol.c   **** 			break;
 193              		.loc 1 100 4 is_stmt 1 view .LVU34
 100:Src/exvol.c   **** 			break;
 194              		.loc 1 100 22 is_stmt 0 view .LVU35
 195 0032 FFF7FEFF 		bl	get_target_vol_diff_sidewall
 196              	.LVL9:
 100:Src/exvol.c   **** 			break;
 197              		.loc 1 100 20 view .LVU36
 198 0036 0E4B     		ldr	r3, .L20+4
 199 0038 83ED000A 		vstr.32	s0, [r3]
 101:Src/exvol.c   **** 
 200              		.loc 1 101 4 is_stmt 1 view .LVU37
 201 003c F3E7     		b	.L12
 202              	.L16:
 104:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 203              		.loc 1 104 4 view .LVU38
 104:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 204              		.loc 1 104 21 is_stmt 0 view .LVU39
 205 003e FFF7FEFF 		bl	get_target_vol_sum_ctrl
 206              	.LVL10:
 104:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_sidewall();
 207              		.loc 1 104 19 view .LVU40
 208 0042 0A4B     		ldr	r3, .L20
 209 0044 83ED000A 		vstr.32	s0, [r3]
 105:Src/exvol.c   **** 			break;
 210              		.loc 1 105 4 is_stmt 1 view .LVU41
 105:Src/exvol.c   **** 			break;
 211              		.loc 1 105 22 is_stmt 0 view .LVU42
 212 0048 FFF7FEFF 		bl	get_target_vol_diff_sidewall
 213              	.LVL11:
 105:Src/exvol.c   **** 			break;
 214              		.loc 1 105 20 view .LVU43
 215 004c 084B     		ldr	r3, .L20+4
 216 004e 83ED000A 		vstr.32	s0, [r3]
 106:Src/exvol.c   **** 
 217              		.loc 1 106 4 is_stmt 1 view .LVU44
 218 0052 E8E7     		b	.L12
 219              	.L14:
 109:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_ctrl();
 220              		.loc 1 109 4 view .LVU45
 109:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_ctrl();
ARM GAS  C:\Temp\ccECMYrR.s 			page 7


 221              		.loc 1 109 21 is_stmt 0 view .LVU46
 222 0054 FFF7FEFF 		bl	get_target_vol_sum_ctrl
 223              	.LVL12:
 109:Src/exvol.c   **** 			target_vol_diff = get_target_vol_diff_ctrl();
 224              		.loc 1 109 19 view .LVU47
 225 0058 044B     		ldr	r3, .L20
 226 005a 83ED000A 		vstr.32	s0, [r3]
 110:Src/exvol.c   **** 			break;
 227              		.loc 1 110 4 is_stmt 1 view .LVU48
 110:Src/exvol.c   **** 			break;
 228              		.loc 1 110 22 is_stmt 0 view .LVU49
 229 005e FFF7FEFF 		bl	get_target_vol_diff_ctrl
 230              	.LVL13:
 110:Src/exvol.c   **** 			break;
 231              		.loc 1 110 20 view .LVU50
 232 0062 034B     		ldr	r3, .L20+4
 233 0064 83ED000A 		vstr.32	s0, [r3]
 111:Src/exvol.c   **** 	}
 234              		.loc 1 111 4 is_stmt 1 view .LVU51
 235              		.loc 1 113 1 is_stmt 0 view .LVU52
 236 0068 DDE7     		b	.L12
 237              	.L21:
 238 006a 00BF     		.align	2
 239              	.L20:
 240 006c 00000000 		.word	.LANCHOR1
 241 0070 00000000 		.word	.LANCHOR2
 242              		.cfi_endproc
 243              	.LFE138:
 245              		.section	.text.clr_motor_vol,"ax",%progbits
 246              		.align	1
 247              		.global	clr_motor_vol
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	clr_motor_vol:
 254              	.LFB139:
 114:Src/exvol.c   **** 
 115:Src/exvol.c   **** //機能 	:モータ印可電圧初期化
 116:Src/exvol.c   **** //引数 	:なし
 117:Src/exvol.c   **** //返り値:なし
 118:Src/exvol.c   **** void clr_motor_vol(void)
 119:Src/exvol.c   **** {
 255              		.loc 1 119 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 120:Src/exvol.c   **** 	target_vol_r = 0;
 260              		.loc 1 120 2 view .LVU54
 261              		.loc 1 120 15 is_stmt 0 view .LVU55
 262 0000 0023     		movs	r3, #0
 263 0002 024A     		ldr	r2, .L23
 264 0004 1360     		str	r3, [r2]	@ float
 121:Src/exvol.c   **** 	target_vol_l = 0;
 265              		.loc 1 121 2 is_stmt 1 view .LVU56
 266              		.loc 1 121 15 is_stmt 0 view .LVU57
ARM GAS  C:\Temp\ccECMYrR.s 			page 8


 267 0006 024A     		ldr	r2, .L23+4
 268 0008 1360     		str	r3, [r2]	@ float
 122:Src/exvol.c   **** }
 269              		.loc 1 122 1 view .LVU58
 270 000a 7047     		bx	lr
 271              	.L24:
 272              		.align	2
 273              	.L23:
 274 000c 00000000 		.word	.LANCHOR3
 275 0010 00000000 		.word	.LANCHOR4
 276              		.cfi_endproc
 277              	.LFE139:
 279              		.section	.text.set_motor_vol,"ax",%progbits
 280              		.align	1
 281              		.global	set_motor_vol
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	set_motor_vol:
 288              	.LFB135:
  48:Src/exvol.c   **** 	switch (ctrl_mode)
 289              		.loc 1 48 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 08B5     		push	{r3, lr}
 294              	.LCFI3:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 3, -8
 297              		.cfi_offset 14, -4
  49:Src/exvol.c   **** 	{
 298              		.loc 1 49 2 view .LVU60
 299 0002 094B     		ldr	r3, .L32
 300 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 301 0006 012B     		cmp	r3, #1
 302 0008 08D0     		beq	.L26
 303 000a 022B     		cmp	r3, #2
 304 000c 09D0     		beq	.L27
 305 000e 13B1     		cbz	r3, .L31
  64:Src/exvol.c   **** 
 306              		.loc 1 64 3 view .LVU61
 307 0010 FFF7FEFF 		bl	clr_motor_vol
 308              	.LVL14:
  67:Src/exvol.c   **** 
 309              		.loc 1 67 1 is_stmt 0 view .LVU62
 310 0014 01E0     		b	.L25
 311              	.L31:
  52:Src/exvol.c   **** 		break;
 312              		.loc 1 52 3 is_stmt 1 view .LVU63
 313 0016 FFF7FEFF 		bl	set_motor_vol_trace
 314              	.LVL15:
  53:Src/exvol.c   **** 	
 315              		.loc 1 53 3 view .LVU64
 316              	.L25:
  67:Src/exvol.c   **** 
 317              		.loc 1 67 1 is_stmt 0 view .LVU65
ARM GAS  C:\Temp\ccECMYrR.s 			page 9


 318 001a 08BD     		pop	{r3, pc}
 319              	.L26:
  56:Src/exvol.c   **** 		break;
 320              		.loc 1 56 3 is_stmt 1 view .LVU66
 321 001c FFF7FEFF 		bl	set_motor_vol_front_wall
 322              	.LVL16:
  57:Src/exvol.c   **** 	
 323              		.loc 1 57 3 view .LVU67
 324 0020 FBE7     		b	.L25
 325              	.L27:
  60:Src/exvol.c   **** 		break;
 326              		.loc 1 60 3 view .LVU68
 327 0022 FFF7FEFF 		bl	set_motor_vol_side_wall
 328              	.LVL17:
  61:Src/exvol.c   **** 	
 329              		.loc 1 61 3 view .LVU69
 330 0026 F8E7     		b	.L25
 331              	.L33:
 332              		.align	2
 333              	.L32:
 334 0028 00000000 		.word	.LANCHOR0
 335              		.cfi_endproc
 336              	.LFE135:
 338              		.section	.text.clr_operate_history,"ax",%progbits
 339              		.align	1
 340              		.global	clr_operate_history
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	clr_operate_history:
 347              	.LFB140:
 123:Src/exvol.c   **** 
 124:Src/exvol.c   **** //機能 	:各制御モードでの操作量履歴クリア
 125:Src/exvol.c   **** //引数 	:なし
 126:Src/exvol.c   **** //返り値:なし
 127:Src/exvol.c   **** void clr_operate_history(void)
 128:Src/exvol.c   **** {
 348              		.loc 1 128 1 view -0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352 0000 08B5     		push	{r3, lr}
 353              	.LCFI4:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 3, -8
 356              		.cfi_offset 14, -4
 129:Src/exvol.c   **** 	switch(ctrl_mode)
 357              		.loc 1 129 2 view .LVU71
 358 0002 0C4B     		ldr	r3, .L42
 359 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 360 0006 012B     		cmp	r3, #1
 361 0008 06D0     		beq	.L35
 362 000a 022B     		cmp	r3, #2
 363 000c 07D0     		beq	.L36
 364 000e 03B1     		cbz	r3, .L40
 365              	.L34:
ARM GAS  C:\Temp\ccECMYrR.s 			page 10


 130:Src/exvol.c   **** 	{
 131:Src/exvol.c   **** 		case trace:
 132:Src/exvol.c   **** 			clr_frontwall_operate_history(); //前壁制御の操作履歴をクリア
 133:Src/exvol.c   **** 			break;
 134:Src/exvol.c   **** 
 135:Src/exvol.c   **** 		case front_wall:
 136:Src/exvol.c   **** 			clr_trace_operate_history();			//軌跡制御の操作履歴をクリア
 137:Src/exvol.c   **** 			break;
 138:Src/exvol.c   **** 		
 139:Src/exvol.c   **** 		case side_wall:
 140:Src/exvol.c   **** 			switch(get_side_wall_ctrl_mode()){
 141:Src/exvol.c   **** 				case none:
 142:Src/exvol.c   **** 					break;
 143:Src/exvol.c   **** 				default:
 144:Src/exvol.c   **** 					adjust_trace_theta();
 145:Src/exvol.c   **** 			}
 146:Src/exvol.c   **** 			clr_frontwall_operate_history(); //前壁制御の操作履歴をクリア
 147:Src/exvol.c   **** 			break;
 148:Src/exvol.c   **** 	}
 149:Src/exvol.c   **** }
 366              		.loc 1 149 1 is_stmt 0 view .LVU72
 367 0010 08BD     		pop	{r3, pc}
 368              	.L40:
 132:Src/exvol.c   **** 			break;
 369              		.loc 1 132 4 is_stmt 1 view .LVU73
 370 0012 FFF7FEFF 		bl	clr_frontwall_operate_history
 371              	.LVL18:
 133:Src/exvol.c   **** 
 372              		.loc 1 133 4 view .LVU74
 373 0016 FBE7     		b	.L34
 374              	.L35:
 136:Src/exvol.c   **** 			break;
 375              		.loc 1 136 4 view .LVU75
 376 0018 FFF7FEFF 		bl	clr_trace_operate_history
 377              	.LVL19:
 137:Src/exvol.c   **** 		
 378              		.loc 1 137 4 view .LVU76
 379 001c F8E7     		b	.L34
 380              	.L36:
 140:Src/exvol.c   **** 				case none:
 381              		.loc 1 140 4 view .LVU77
 140:Src/exvol.c   **** 				case none:
 382              		.loc 1 140 11 is_stmt 0 view .LVU78
 383 001e FFF7FEFF 		bl	get_side_wall_ctrl_mode
 384              	.LVL20:
 385 0022 0328     		cmp	r0, #3
 386 0024 02D1     		bne	.L41
 387              	.L38:
 146:Src/exvol.c   **** 			break;
 388              		.loc 1 146 4 is_stmt 1 view .LVU79
 389 0026 FFF7FEFF 		bl	clr_frontwall_operate_history
 390              	.LVL21:
 147:Src/exvol.c   **** 	}
 391              		.loc 1 147 4 view .LVU80
 392              		.loc 1 149 1 is_stmt 0 view .LVU81
 393 002a F1E7     		b	.L34
 394              	.L41:
ARM GAS  C:\Temp\ccECMYrR.s 			page 11


 144:Src/exvol.c   **** 			}
 395              		.loc 1 144 6 is_stmt 1 view .LVU82
 396 002c FFF7FEFF 		bl	adjust_trace_theta
 397              	.LVL22:
 398 0030 F9E7     		b	.L38
 399              	.L43:
 400 0032 00BF     		.align	2
 401              	.L42:
 402 0034 00000000 		.word	.LANCHOR0
 403              		.cfi_endproc
 404              	.LFE140:
 406              		.section	.text.calc_motor_vol,"ax",%progbits
 407              		.align	1
 408              		.global	calc_motor_vol
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv4-sp-d16
 414              	calc_motor_vol:
 415              	.LFB141:
 150:Src/exvol.c   **** 
 151:Src/exvol.c   **** //機能	: 印加電圧の和、差から各モータに印加する電圧を決定する。
 152:Src/exvol.c   **** //引数	: なし
 153:Src/exvol.c   **** //返り値	: なし
 154:Src/exvol.c   **** void calc_motor_vol ( void )
 155:Src/exvol.c   **** {
 416              		.loc 1 155 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 156:Src/exvol.c   **** 	target_vol_r = (target_vol_sum + target_vol_diff)/2;
 421              		.loc 1 156 2 view .LVU84
 422              		.loc 1 156 33 is_stmt 0 view .LVU85
 423 0000 0B4B     		ldr	r3, .L45
 424 0002 D3ED007A 		vldr.32	s15, [r3]
 425 0006 0B4B     		ldr	r3, .L45+4
 426 0008 93ED006A 		vldr.32	s12, [r3]
 427 000c 37EE867A 		vadd.f32	s14, s15, s12
 428              		.loc 1 156 51 view .LVU86
 429 0010 F6EE006A 		vmov.f32	s13, #5.0e-1
 430 0014 27EE267A 		vmul.f32	s14, s14, s13
 431              		.loc 1 156 15 view .LVU87
 432 0018 074B     		ldr	r3, .L45+8
 433 001a 83ED007A 		vstr.32	s14, [r3]
 157:Src/exvol.c   **** 	target_vol_l = (target_vol_sum - target_vol_diff)/2;	
 434              		.loc 1 157 2 is_stmt 1 view .LVU88
 435              		.loc 1 157 33 is_stmt 0 view .LVU89
 436 001e 77EEC67A 		vsub.f32	s15, s15, s12
 437              		.loc 1 157 51 view .LVU90
 438 0022 67EEA67A 		vmul.f32	s15, s15, s13
 439              		.loc 1 157 15 view .LVU91
 440 0026 054B     		ldr	r3, .L45+12
 441 0028 C3ED007A 		vstr.32	s15, [r3]
 158:Src/exvol.c   **** }
 442              		.loc 1 158 1 view .LVU92
 443 002c 7047     		bx	lr
ARM GAS  C:\Temp\ccECMYrR.s 			page 12


 444              	.L46:
 445 002e 00BF     		.align	2
 446              	.L45:
 447 0030 00000000 		.word	.LANCHOR1
 448 0034 00000000 		.word	.LANCHOR2
 449 0038 00000000 		.word	.LANCHOR3
 450 003c 00000000 		.word	.LANCHOR4
 451              		.cfi_endproc
 452              	.LFE141:
 454              		.section	.text.calc_vol2duty,"ax",%progbits
 455              		.align	1
 456              		.global	calc_vol2duty
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu fpv4-sp-d16
 462              	calc_vol2duty:
 463              	.LFB142:
 159:Src/exvol.c   **** 
 160:Src/exvol.c   **** //機能 	:印可電圧を変調率に変換
 161:Src/exvol.c   **** //引数 	:なし
 162:Src/exvol.c   **** //返り値:なし
 163:Src/exvol.c   **** void calc_vol2duty ( void )
 164:Src/exvol.c   **** {
 464              		.loc 1 164 1 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468 0000 08B5     		push	{r3, lr}
 469              	.LCFI5:
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 3, -8
 472              		.cfi_offset 14, -4
 473 0002 2DED028B 		vpush.64	{d8}
 474              	.LCFI6:
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 80, -16
 477              		.cfi_offset 81, -12
 165:Src/exvol.c   **** 
 166:Src/exvol.c   **** 	/* バッテリー電圧とモータに印加する電圧から、duty[*0.1%]を算出	*/
 167:Src/exvol.c   **** 	target_duty_r = target_vol_r / (Battery_GetVoltage()) * 1000;
 478              		.loc 1 167 2 view .LVU94
 479              		.loc 1 167 31 is_stmt 0 view .LVU95
 480 0006 114B     		ldr	r3, .L49
 481 0008 93ED008A 		vldr.32	s16, [r3]
 482              		.loc 1 167 34 view .LVU96
 483 000c FFF7FEFF 		bl	Battery_GetVoltage
 484              	.LVL23:
 485              		.loc 1 167 31 view .LVU97
 486 0010 C8EE007A 		vdiv.f32	s15, s16, s0
 487              		.loc 1 167 56 view .LVU98
 488 0014 9FED0E8A 		vldr.32	s16, .L49+4
 489 0018 67EE887A 		vmul.f32	s15, s15, s16
 490              		.loc 1 167 16 view .LVU99
 491 001c FDEEE77A 		vcvt.s32.f32	s15, s15
 492 0020 0C4B     		ldr	r3, .L49+8
 493 0022 17EE902A 		vmov	r2, s15	@ int
ARM GAS  C:\Temp\ccECMYrR.s 			page 13


 494 0026 1A80     		strh	r2, [r3]	@ movhi
 168:Src/exvol.c   **** 	target_duty_l = target_vol_l / (Battery_GetVoltage()) * 1000;
 495              		.loc 1 168 2 is_stmt 1 view .LVU100
 496              		.loc 1 168 31 is_stmt 0 view .LVU101
 497 0028 0B4B     		ldr	r3, .L49+12
 498 002a D3ED008A 		vldr.32	s17, [r3]
 499              		.loc 1 168 34 view .LVU102
 500 002e FFF7FEFF 		bl	Battery_GetVoltage
 501              	.LVL24:
 502              		.loc 1 168 31 view .LVU103
 503 0032 C8EE807A 		vdiv.f32	s15, s17, s0
 504              		.loc 1 168 56 view .LVU104
 505 0036 67EE887A 		vmul.f32	s15, s15, s16
 506              		.loc 1 168 16 view .LVU105
 507 003a FDEEE77A 		vcvt.s32.f32	s15, s15
 508 003e 074B     		ldr	r3, .L49+16
 509 0040 17EE902A 		vmov	r2, s15	@ int
 510 0044 1A80     		strh	r2, [r3]	@ movhi
 169:Src/exvol.c   **** }
 511              		.loc 1 169 1 view .LVU106
 512 0046 BDEC028B 		vldm	sp!, {d8}
 513              	.LCFI7:
 514              		.cfi_restore 80
 515              		.cfi_restore 81
 516              		.cfi_def_cfa_offset 8
 517 004a 08BD     		pop	{r3, pc}
 518              	.L50:
 519              		.align	2
 520              	.L49:
 521 004c 00000000 		.word	.LANCHOR3
 522 0050 00007A44 		.word	1148846080
 523 0054 00000000 		.word	.LANCHOR5
 524 0058 00000000 		.word	.LANCHOR4
 525 005c 00000000 		.word	.LANCHOR6
 526              		.cfi_endproc
 527              	.LFE142:
 529              		.section	.text.motor_duty_adjust,"ax",%progbits
 530              		.align	1
 531              		.global	motor_duty_adjust
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	motor_duty_adjust:
 538              	.LFB143:
 170:Src/exvol.c   **** 
 171:Src/exvol.c   **** //機能 	:非線形部は使わないように、変調率を調整
 172:Src/exvol.c   **** //引数 	:なし
 173:Src/exvol.c   **** //返り値:なし
 174:Src/exvol.c   **** //
 175:Src/exvol.c   **** void motor_duty_adjust (void)
 176:Src/exvol.c   **** {
 539              		.loc 1 176 1 is_stmt 1 view -0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
ARM GAS  C:\Temp\ccECMYrR.s 			page 14


 177:Src/exvol.c   **** 	if( target_duty_r > 0){
 544              		.loc 1 177 2 view .LVU108
 545              		.loc 1 177 20 is_stmt 0 view .LVU109
 546 0000 0C4B     		ldr	r3, .L56
 547 0002 B3F90030 		ldrsh	r3, [r3]
 548              		.loc 1 177 4 view .LVU110
 549 0006 002B     		cmp	r3, #0
 550 0008 0BDD     		ble	.L52
 178:Src/exvol.c   **** 		target_duty_r = target_duty_r + 40;  //40->30
 551              		.loc 1 178 3 is_stmt 1 view .LVU111
 552              		.loc 1 178 33 is_stmt 0 view .LVU112
 553 000a 2833     		adds	r3, r3, #40
 554              		.loc 1 178 17 view .LVU113
 555 000c 094A     		ldr	r2, .L56
 556 000e 1380     		strh	r3, [r2]	@ movhi
 557              	.L53:
 179:Src/exvol.c   **** 	}
 180:Src/exvol.c   **** 	else{
 181:Src/exvol.c   **** 		target_duty_r = target_duty_r - 45; //45 ->35
 182:Src/exvol.c   **** 	}
 183:Src/exvol.c   **** 
 184:Src/exvol.c   **** 	if( target_duty_l > 0){
 558              		.loc 1 184 2 is_stmt 1 view .LVU114
 559              		.loc 1 184 20 is_stmt 0 view .LVU115
 560 0010 094B     		ldr	r3, .L56+4
 561 0012 B3F90030 		ldrsh	r3, [r3]
 562              		.loc 1 184 4 view .LVU116
 563 0016 002B     		cmp	r3, #0
 564 0018 07DD     		ble	.L54
 185:Src/exvol.c   **** 		target_duty_l = target_duty_l + 40;  //40->30
 565              		.loc 1 185 3 is_stmt 1 view .LVU117
 566              		.loc 1 185 33 is_stmt 0 view .LVU118
 567 001a 2833     		adds	r3, r3, #40
 568              		.loc 1 185 17 view .LVU119
 569 001c 064A     		ldr	r2, .L56+4
 570 001e 1380     		strh	r3, [r2]	@ movhi
 571 0020 7047     		bx	lr
 572              	.L52:
 181:Src/exvol.c   **** 	}
 573              		.loc 1 181 3 is_stmt 1 view .LVU120
 181:Src/exvol.c   **** 	}
 574              		.loc 1 181 33 is_stmt 0 view .LVU121
 575 0022 2D3B     		subs	r3, r3, #45
 181:Src/exvol.c   **** 	}
 576              		.loc 1 181 17 view .LVU122
 577 0024 034A     		ldr	r2, .L56
 578 0026 1380     		strh	r3, [r2]	@ movhi
 579 0028 F2E7     		b	.L53
 580              	.L54:
 186:Src/exvol.c   **** 	}
 187:Src/exvol.c   **** 	else{
 188:Src/exvol.c   **** 		target_duty_l = target_duty_l - 45; //45 ->35
 581              		.loc 1 188 3 is_stmt 1 view .LVU123
 582              		.loc 1 188 33 is_stmt 0 view .LVU124
 583 002a 2D3B     		subs	r3, r3, #45
 584              		.loc 1 188 17 view .LVU125
 585 002c 024A     		ldr	r2, .L56+4
ARM GAS  C:\Temp\ccECMYrR.s 			page 15


 586 002e 1380     		strh	r3, [r2]	@ movhi
 189:Src/exvol.c   **** 	}
 190:Src/exvol.c   **** }
 587              		.loc 1 190 1 view .LVU126
 588 0030 7047     		bx	lr
 589              	.L57:
 590 0032 00BF     		.align	2
 591              	.L56:
 592 0034 00000000 		.word	.LANCHOR5
 593 0038 00000000 		.word	.LANCHOR6
 594              		.cfi_endproc
 595              	.LFE143:
 597              		.section	.text.set_motor_duty,"ax",%progbits
 598              		.align	1
 599              		.global	set_motor_duty
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	set_motor_duty:
 606              	.LFB144:
 191:Src/exvol.c   **** 
 192:Src/exvol.c   **** //機能 	:モータに印可電圧を出力
 193:Src/exvol.c   **** //引数 	:なし
 194:Src/exvol.c   **** //返り値:なし
 195:Src/exvol.c   **** void set_motor_duty (void)
 196:Src/exvol.c   **** {
 607              		.loc 1 196 1 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 08B5     		push	{r3, lr}
 612              	.LCFI8:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 3, -8
 615              		.cfi_offset 14, -4
 197:Src/exvol.c   **** 	set_duty_l(target_duty_l);
 616              		.loc 1 197 2 view .LVU128
 617 0002 054B     		ldr	r3, .L60
 618 0004 B3F90000 		ldrsh	r0, [r3]
 619 0008 FFF7FEFF 		bl	set_duty_l
 620              	.LVL25:
 198:Src/exvol.c   **** 	set_duty_r(target_duty_r);
 621              		.loc 1 198 2 view .LVU129
 622 000c 034B     		ldr	r3, .L60+4
 623 000e B3F90000 		ldrsh	r0, [r3]
 624 0012 FFF7FEFF 		bl	set_duty_r
 625              	.LVL26:
 199:Src/exvol.c   **** }
 626              		.loc 1 199 1 is_stmt 0 view .LVU130
 627 0016 08BD     		pop	{r3, pc}
 628              	.L61:
 629              		.align	2
 630              	.L60:
 631 0018 00000000 		.word	.LANCHOR6
 632 001c 00000000 		.word	.LANCHOR5
 633              		.cfi_endproc
ARM GAS  C:\Temp\ccECMYrR.s 			page 16


 634              	.LFE144:
 636              		.section	.text.motor_1ms,"ax",%progbits
 637              		.align	1
 638              		.global	motor_1ms
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu fpv4-sp-d16
 644              	motor_1ms:
 645              	.LFB133:
  26:Src/exvol.c   **** 	set_motor_vol();		//印加電圧の和、差を制御モードに従い決定
 646              		.loc 1 26 1 is_stmt 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650 0000 08B5     		push	{r3, lr}
 651              	.LCFI9:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 3, -8
 654              		.cfi_offset 14, -4
  27:Src/exvol.c   **** 	clr_operate_history();	//各制御の操作履歴クリア
 655              		.loc 1 27 2 view .LVU132
 656 0002 FFF7FEFF 		bl	set_motor_vol
 657              	.LVL27:
  28:Src/exvol.c   **** 	calc_motor_vol();		//印加電圧の和、差から各モータの印加電圧を決定する。
 658              		.loc 1 28 2 view .LVU133
 659 0006 FFF7FEFF 		bl	clr_operate_history
 660              	.LVL28:
  29:Src/exvol.c   **** 	calc_vol2duty();		//印加電圧を変調率に変換
 661              		.loc 1 29 2 view .LVU134
 662 000a FFF7FEFF 		bl	calc_motor_vol
 663              	.LVL29:
  30:Src/exvol.c   **** 	motor_duty_adjust();	//低変調率を避ける調整
 664              		.loc 1 30 2 view .LVU135
 665 000e FFF7FEFF 		bl	calc_vol2duty
 666              	.LVL30:
  31:Src/exvol.c   **** 	set_motor_duty();		//モータに電圧を印加
 667              		.loc 1 31 2 view .LVU136
 668 0012 FFF7FEFF 		bl	motor_duty_adjust
 669              	.LVL31:
  32:Src/exvol.c   **** }
 670              		.loc 1 32 2 view .LVU137
 671 0016 FFF7FEFF 		bl	set_motor_duty
 672              	.LVL32:
  33:Src/exvol.c   **** 
 673              		.loc 1 33 1 is_stmt 0 view .LVU138
 674 001a 08BD     		pop	{r3, pc}
 675              		.cfi_endproc
 676              	.LFE133:
 678              		.section	.text.get_target_duty_r,"ax",%progbits
 679              		.align	1
 680              		.global	get_target_duty_r
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv4-sp-d16
 686              	get_target_duty_r:
ARM GAS  C:\Temp\ccECMYrR.s 			page 17


 687              	.LFB145:
 200:Src/exvol.c   **** 
 201:Src/exvol.c   **** //機能	: 右モータの変調率を取得する
 202:Src/exvol.c   **** //引数	: なし
 203:Src/exvol.c   **** //返り値	: なし
 204:Src/exvol.c   **** int16_t get_target_duty_r ( void )
 205:Src/exvol.c   **** {
 688              		.loc 1 205 1 is_stmt 1 view -0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 206:Src/exvol.c   **** 	return target_duty_r;
 693              		.loc 1 206 2 view .LVU140
 207:Src/exvol.c   **** }
 694              		.loc 1 207 1 is_stmt 0 view .LVU141
 695 0000 014B     		ldr	r3, .L65
 696 0002 B3F90000 		ldrsh	r0, [r3]
 697 0006 7047     		bx	lr
 698              	.L66:
 699              		.align	2
 700              	.L65:
 701 0008 00000000 		.word	.LANCHOR5
 702              		.cfi_endproc
 703              	.LFE145:
 705              		.section	.text.get_target_duty_l,"ax",%progbits
 706              		.align	1
 707              		.global	get_target_duty_l
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	get_target_duty_l:
 714              	.LFB146:
 208:Src/exvol.c   **** 
 209:Src/exvol.c   **** //機能	: 左モータの変調率を取得する
 210:Src/exvol.c   **** //引数	: なし
 211:Src/exvol.c   **** //返り値	: なし
 212:Src/exvol.c   **** int16_t get_target_duty_l ( void )
 213:Src/exvol.c   **** {
 715              		.loc 1 213 1 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 214:Src/exvol.c   **** 	return target_duty_l;
 720              		.loc 1 214 2 view .LVU143
 215:Src/exvol.c   **** }...
 721              		.loc 1 215 1 is_stmt 0 view .LVU144
 722 0000 014B     		ldr	r3, .L68
 723 0002 B3F90000 		ldrsh	r0, [r3]
 724 0006 7047     		bx	lr
 725              	.L69:
 726              		.align	2
 727              	.L68:
 728 0008 00000000 		.word	.LANCHOR6
 729              		.cfi_endproc
ARM GAS  C:\Temp\ccECMYrR.s 			page 18


 730              	.LFE146:
 732              		.section	.bss.ctrl_mode,"aw",%nobits
 733              		.set	.LANCHOR0,. + 0
 736              	ctrl_mode:
 737 0000 00       		.space	1
 738              		.section	.bss.target_duty_l,"aw",%nobits
 739              		.align	1
 740              		.set	.LANCHOR6,. + 0
 743              	target_duty_l:
 744 0000 0000     		.space	2
 745              		.section	.bss.target_duty_r,"aw",%nobits
 746              		.align	1
 747              		.set	.LANCHOR5,. + 0
 750              	target_duty_r:
 751 0000 0000     		.space	2
 752              		.section	.bss.target_vol_diff,"aw",%nobits
 753              		.align	2
 754              		.set	.LANCHOR2,. + 0
 757              	target_vol_diff:
 758 0000 00000000 		.space	4
 759              		.section	.bss.target_vol_l,"aw",%nobits
 760              		.align	2
 761              		.set	.LANCHOR4,. + 0
 764              	target_vol_l:
 765 0000 00000000 		.space	4
 766              		.section	.bss.target_vol_r,"aw",%nobits
 767              		.align	2
 768              		.set	.LANCHOR3,. + 0
 771              	target_vol_r:
 772 0000 00000000 		.space	4
 773              		.section	.bss.target_vol_sum,"aw",%nobits
 774              		.align	2
 775              		.set	.LANCHOR1,. + 0
 778              	target_vol_sum:
 779 0000 00000000 		.space	4
 780              		.text
 781              	.Letext0:
 782              		.file 2 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\arm-none-eabi\\include\\machine\\_default_t
 783              		.file 3 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 784              		.file 4 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 785              		.file 5 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\st
 786              		.file 6 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 787              		.file 7 "c:\\tools\\gcc-arm-none-eabi-9-2019-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 788              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 789              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 790              		.file 10 "Inc/exvol.h"
 791              		.file 11 "Inc/adjust.h"
 792              		.file 12 "Inc/motor.h"
 793              		.file 13 "Inc/battery.h"
 794              		.file 14 "Inc/control.h"
ARM GAS  C:\Temp\ccECMYrR.s 			page 19


DEFINED SYMBOLS
                            *ABS*:00000000 exvol.c
  C:\Temp\ccECMYrR.s:18     .text.set_mode_ctrl:00000000 $t
  C:\Temp\ccECMYrR.s:26     .text.set_mode_ctrl:00000000 set_mode_ctrl
  C:\Temp\ccECMYrR.s:44     .text.set_mode_ctrl:00000008 $d
  C:\Temp\ccECMYrR.s:49     .text.set_motor_vol_trace:00000000 $t
  C:\Temp\ccECMYrR.s:56     .text.set_motor_vol_trace:00000000 set_motor_vol_trace
  C:\Temp\ccECMYrR.s:86     .text.set_motor_vol_trace:00000018 $d
  C:\Temp\ccECMYrR.s:92     .text.set_motor_vol_front_wall:00000000 $t
  C:\Temp\ccECMYrR.s:99     .text.set_motor_vol_front_wall:00000000 set_motor_vol_front_wall
  C:\Temp\ccECMYrR.s:129    .text.set_motor_vol_front_wall:00000018 $d
  C:\Temp\ccECMYrR.s:135    .text.set_motor_vol_side_wall:00000000 $t
  C:\Temp\ccECMYrR.s:142    .text.set_motor_vol_side_wall:00000000 set_motor_vol_side_wall
  C:\Temp\ccECMYrR.s:161    .text.set_motor_vol_side_wall:0000000e $d
  C:\Temp\ccECMYrR.s:165    .text.set_motor_vol_side_wall:00000012 $t
  C:\Temp\ccECMYrR.s:240    .text.set_motor_vol_side_wall:0000006c $d
  C:\Temp\ccECMYrR.s:246    .text.clr_motor_vol:00000000 $t
  C:\Temp\ccECMYrR.s:253    .text.clr_motor_vol:00000000 clr_motor_vol
  C:\Temp\ccECMYrR.s:274    .text.clr_motor_vol:0000000c $d
  C:\Temp\ccECMYrR.s:280    .text.set_motor_vol:00000000 $t
  C:\Temp\ccECMYrR.s:287    .text.set_motor_vol:00000000 set_motor_vol
  C:\Temp\ccECMYrR.s:334    .text.set_motor_vol:00000028 $d
  C:\Temp\ccECMYrR.s:339    .text.clr_operate_history:00000000 $t
  C:\Temp\ccECMYrR.s:346    .text.clr_operate_history:00000000 clr_operate_history
  C:\Temp\ccECMYrR.s:402    .text.clr_operate_history:00000034 $d
  C:\Temp\ccECMYrR.s:407    .text.calc_motor_vol:00000000 $t
  C:\Temp\ccECMYrR.s:414    .text.calc_motor_vol:00000000 calc_motor_vol
  C:\Temp\ccECMYrR.s:447    .text.calc_motor_vol:00000030 $d
  C:\Temp\ccECMYrR.s:455    .text.calc_vol2duty:00000000 $t
  C:\Temp\ccECMYrR.s:462    .text.calc_vol2duty:00000000 calc_vol2duty
  C:\Temp\ccECMYrR.s:521    .text.calc_vol2duty:0000004c $d
  C:\Temp\ccECMYrR.s:530    .text.motor_duty_adjust:00000000 $t
  C:\Temp\ccECMYrR.s:537    .text.motor_duty_adjust:00000000 motor_duty_adjust
  C:\Temp\ccECMYrR.s:592    .text.motor_duty_adjust:00000034 $d
  C:\Temp\ccECMYrR.s:598    .text.set_motor_duty:00000000 $t
  C:\Temp\ccECMYrR.s:605    .text.set_motor_duty:00000000 set_motor_duty
  C:\Temp\ccECMYrR.s:631    .text.set_motor_duty:00000018 $d
  C:\Temp\ccECMYrR.s:637    .text.motor_1ms:00000000 $t
  C:\Temp\ccECMYrR.s:644    .text.motor_1ms:00000000 motor_1ms
  C:\Temp\ccECMYrR.s:679    .text.get_target_duty_r:00000000 $t
  C:\Temp\ccECMYrR.s:686    .text.get_target_duty_r:00000000 get_target_duty_r
  C:\Temp\ccECMYrR.s:701    .text.get_target_duty_r:00000008 $d
  C:\Temp\ccECMYrR.s:706    .text.get_target_duty_l:00000000 $t
  C:\Temp\ccECMYrR.s:713    .text.get_target_duty_l:00000000 get_target_duty_l
  C:\Temp\ccECMYrR.s:728    .text.get_target_duty_l:00000008 $d
  C:\Temp\ccECMYrR.s:736    .bss.ctrl_mode:00000000 ctrl_mode
  C:\Temp\ccECMYrR.s:737    .bss.ctrl_mode:00000000 $d
  C:\Temp\ccECMYrR.s:739    .bss.target_duty_l:00000000 $d
  C:\Temp\ccECMYrR.s:743    .bss.target_duty_l:00000000 target_duty_l
  C:\Temp\ccECMYrR.s:746    .bss.target_duty_r:00000000 $d
  C:\Temp\ccECMYrR.s:750    .bss.target_duty_r:00000000 target_duty_r
  C:\Temp\ccECMYrR.s:753    .bss.target_vol_diff:00000000 $d
  C:\Temp\ccECMYrR.s:757    .bss.target_vol_diff:00000000 target_vol_diff
  C:\Temp\ccECMYrR.s:760    .bss.target_vol_l:00000000 $d
  C:\Temp\ccECMYrR.s:764    .bss.target_vol_l:00000000 target_vol_l
  C:\Temp\ccECMYrR.s:767    .bss.target_vol_r:00000000 $d
  C:\Temp\ccECMYrR.s:771    .bss.target_vol_r:00000000 target_vol_r
ARM GAS  C:\Temp\ccECMYrR.s 			page 20


  C:\Temp\ccECMYrR.s:774    .bss.target_vol_sum:00000000 $d
  C:\Temp\ccECMYrR.s:778    .bss.target_vol_sum:00000000 target_vol_sum

UNDEFINED SYMBOLS
get_target_vol_sum_ctrl
get_target_vol_diff_ctrl
get_target_vol_sum_frontwall
get_target_vol_diff_frontwall
get_side_wall_ctrl_mode
get_target_vol_diff_sidewall
clr_frontwall_operate_history
clr_trace_operate_history
adjust_trace_theta
Battery_GetVoltage
set_duty_l
set_duty_r
